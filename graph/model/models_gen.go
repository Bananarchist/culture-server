// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Culture struct {
	CultureID string     `json:"cultureId"`
	Jar       *Jar       `json:"jar"`
	Specimen  *Specimen  `json:"specimen"`
	Substrate *Substrate `json:"substrate"`
	Cultured  string     `json:"cultured"`
	Origins   []*Culture `json:"origins"`
}

type Formula struct {
	FormulaID   string  `json:"formulaId"`
	Description *string `json:"description"`
	Nickname    string  `json:"nickname"`
}

type Jar struct {
	JarID       string         `json:"jarId"`
	JarType     ContainerType  `json:"jarType"`
	Description *string        `json:"description"`
	Volume      float64        `json:"volume"`
	Unit        VolumetricUnit `json:"unit"`
}

type NewCulture struct {
	JarID       string   `json:"jarId"`
	SpecimenID  string   `json:"specimenId"`
	SubstrateID string   `json:"substrateId"`
	Cultured    string   `json:"cultured"`
	Origins     []string `json:"origins"`
}

type NewFormula struct {
	Description *string `json:"description"`
	Nickname    string  `json:"nickname"`
}

type NewJar struct {
	JarType     string  `json:"jarType"`
	Description *string `json:"description"`
	Volume      float64 `json:"volume"`
	Unit        string  `json:"unit"`
}

type NewSpecimen struct {
	TaxonomyID       string  `json:"taxonomyId"`
	ParentSpecimenID *string `json:"parentSpecimenId"`
	Nickname         string  `json:"nickname"`
}

type NewSubstrate struct {
	FormulaID string   `json:"formulaId"`
	Quantity  *float64 `json:"quantity"`
	Unit      string   `json:"unit"`
}

type NewTaxonomy struct {
	Genus      string  `json:"genus"`
	Species    string  `json:"species"`
	Subspecies *string `json:"subspecies"`
}

type Specimen struct {
	SpecimenID     string    `json:"specimenId"`
	Taxonomy       *Taxonomy `json:"taxonomy"`
	ParentSpecimen *Specimen `json:"parentSpecimen"`
	Nickname       *string   `json:"nickname"`
}

type Substrate struct {
	SubstrateID string         `json:"substrateId"`
	Formula     *Formula       `json:"formula"`
	Quantity    float64        `json:"quantity"`
	Unit        VolumetricUnit `json:"unit"`
}

type Taxonomy struct {
	TaxonomyID string           `json:"taxonomyId"`
	Genus      string           `json:"genus"`
	Species    string           `json:"species"`
	Subspecies *string          `json:"subspecies"`
	Images     []*TaxonomyImage `json:"images"`
}

type TaxonomyImage struct {
	TaxonomyImageID string `json:"taxonomyImageId"`
	TaxonomyID      string `json:"taxonomyId"`
	Filename        string `json:"filename"`
}

type ContainerType string

const (
	ContainerTypeJar ContainerType = "JAR"
	ContainerTypeBox ContainerType = "BOX"
	ContainerTypePot ContainerType = "POT"
	ContainerTypeBag ContainerType = "BAG"
)

var AllContainerType = []ContainerType{
	ContainerTypeJar,
	ContainerTypeBox,
	ContainerTypePot,
	ContainerTypeBag,
}

func (e ContainerType) IsValid() bool {
	switch e {
	case ContainerTypeJar, ContainerTypeBox, ContainerTypePot, ContainerTypeBag:
		return true
	}
	return false
}

func (e ContainerType) String() string {
	return string(e)
}

func (e *ContainerType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContainerType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContainerType", str)
	}
	return nil
}

func (e ContainerType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VolumetricUnit string

const (
	VolumetricUnitQuart  VolumetricUnit = "QUART"
	VolumetricUnitPint   VolumetricUnit = "PINT"
	VolumetricUnitLiter  VolumetricUnit = "LITER"
	VolumetricUnitGallon VolumetricUnit = "GALLON"
	VolumetricUnitPound  VolumetricUnit = "POUND"
)

var AllVolumetricUnit = []VolumetricUnit{
	VolumetricUnitQuart,
	VolumetricUnitPint,
	VolumetricUnitLiter,
	VolumetricUnitGallon,
	VolumetricUnitPound,
}

func (e VolumetricUnit) IsValid() bool {
	switch e {
	case VolumetricUnitQuart, VolumetricUnitPint, VolumetricUnitLiter, VolumetricUnitGallon, VolumetricUnitPound:
		return true
	}
	return false
}

func (e VolumetricUnit) String() string {
	return string(e)
}

func (e *VolumetricUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VolumetricUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VolumetricUnit", str)
	}
	return nil
}

func (e VolumetricUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
